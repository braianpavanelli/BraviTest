@model IList<BraviBraian.MVC.ViewModels.ContactViewModel>

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Contact</h4>

        <hr />
        <h5>@Model.First().Person.Name</h5>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @*@foreach (var item in Model)*@
        @for (int i = 0; i < Model.Count(); i++)
        {
            <div class="col-md-10">
                @Html.HiddenFor(model => model[i].Id)

                <div class="form-group">
                    @Html.LabelFor(model => model[i].Description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model[i].Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model[i].Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model[i].IdContactType, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <select class="form-control select2 selectContentType" data-toggle="select" data-placeholder="Select" title="Simple select" id="selectContentType" data-live-search="true" data-live-search-placeholder="Search ...">
                            <option value=""></option>
                            @foreach (var itemSelect in ViewBag.ContactTypes)
                            {
                                <option value="@itemSelect.Id">@itemSelect.Name</option>
                            }
                        </select>
                        @Html.HiddenFor(m => m[i].IdContactType, new { @class = "selectedContentType" })
                        @Html.ValidationMessageFor(model => model[i].IdContactType, "", new { @class = "text-danger" })
                    </div>
                </div>

                @Html.HiddenFor(model => model[i].IdPerson)
            </div>
            <div class="col-md-2">
                <div id="remove" class="h3 text-danger" style="cursor: pointer;" onclick="removeContact('@Model[i].Id')"><i class="now-ui-icons ui-1_simple-remove"></i></div>
            </div>
        }
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="col-md-2"></div>
            <div class="col-md-3">
                <a class="text-success" style="cursor: pointer;" id="addContact"><i class="now-ui-icons ui-1_simple-add"> Add a contact to this person</i></a>
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" id="btnSave" />
        </div>
    </div>
}



<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts
        {
    <script type="text/javascript">
        $(document).ready(
            function () {
                var countSelect = $(".selectContentType");
                console.log(countSelect);
                var countSelected = $(".selectedContentType");
                console.log(countSelected);
                for (var i = 0; i < countSelect.length; i++) {
                    var temp = countSelect.eq(i);
                    console.log(temp);
                    var temp2 = countSelected.eq(i);
                    console.log(temp2);
                    temp.val(temp2.val()).trigger('changeF');

                    changeF(temp, temp2);
                }
                //$("#selectContentType").val($(".selectedContentType").val()).trigger('change');
            });

        function changeF(select, selected)
        {
            $(select).change(function () {
                var contentType = $(this).find(':selected').val();
                $(selected).val(contentType);
            });
        }

        @*$("#btnSave").on("click", function () {
            var json = { id: idValue, objArray: [{ id :}] };
            $.ajax({
                url: '@ViewBag.UriApi' + '/contact',
                type: 'PUT',
                data: JSON.stringify(json),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (e) {
                    alert('Successfully Deleted.');
                    location.reload();
            }
            });
        });*@

        function removeContact(idValue) {
            var json = { id: idValue };
            $.ajax({
                url: '@ViewBag.UriApi' + '/contact',
                type: 'DELETE',
                data: JSON.stringify(json),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (e) {
                    location.reload();
            }
            });
        };

        $("#addContact").on("click",
            function addContact() {
                var id = @Model.FirstOrDefault().IdPerson;
                Swal.mixin({
                    confirmButtonText: 'Next &rarr;',
                    showCancelButton: true,
                    progressSteps: ['1', '2']
                }).queue([
                    {
                        input: 'select',
                        title: 'Contact Type',

                        inputOptions: {
                            '1': 'Phone',
                            '2': 'Email',
                            '3': 'WhatsApp'
                        },
                        inputPlaceholder: 'Select',
                        inputValidator: (value) => {
                            if (!value) {
                                return 'You have to select a type'
                            }
                        }
                    }, {
                        title: 'Value',
                        input: 'text',
                        inputClass: 'swal2-overflow datetimepicker',
                        inputValidator: (value) => {
                            if (!value) {
                                return 'A value for a contact is required'
                            }
                        },

                    },]).then((result) => {
                        values = {
                            idPerson: id,
                            idContactType: result.value[0],
                            description: result.value[1],
                        }
                        jsonObj = $.parseJSON(JSON.stringify(values));
                        var resposta;
                        $.post('@ViewBag.UriApi' + '/contact', jsonObj, function (response) {
                            resposta = response;
                        }).done(
                            function () {
                                Swal.fire({
                                    title: "Added!",
                                    text: resposta,
                                    type: 'success',
                                    onClose: () => {
                                        location.reload();
                                    }
                                })
                            }).fail(function () {
                                Swal.fire({
                                    title: "Sorry we got an error!",
                                    text: "Maybe the API is not Working",
                                    type: 'error',
                                })
                            });
                    })
            });
    </script>
}
